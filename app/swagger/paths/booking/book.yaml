post:
  tags:
    - Booking
  summary: Books one of the vehicles returned by the avail operation.
  description: |
    This operation books one of the vehicles returned by a valid avail request, identified by the `id` field returned in the response of the avail operation. The only compulsory fields of the body of this request are `id`, `paymentType` and `customer.phone`. However most of the vehicles will require extra information such as `customer.name` or `customer.phone`. This information is returned by the avail operation in the `requiredForBooking` field. If you do not include this extra required information, the request will fail. The potential values of this `requiredForBooking` field are:
    - `destination.latitude`: the latitude of the destination address. If this field is required, then `destination.longitude` will be as well.
    - `destination.longitude`: the longitude of the destination address. If this field is required, then `destination.longitude` will be as well.
    - `customer.gender`: the gender of the customer. It can be `male` or `female`.
    - `customer.firstname`: the first name of the customer.
    - `customer.lastname`: the last name of the customer.
    - `customer.email`: the email of the customer.
    - `customer.city`: the city of the customer.
    - `customer.country`: the country of the customer.

    **If the selected `paymentType` is `app`**, the request has to include the parameter `creditcard.token`, which is one of the user's tokenized credit card. This tokenized credit card is obtained through the `[GET]paymentMethods` operation in **User**.
  consumes:
    - application/json
  produces:
    - application/json
  parameters:
    - $ref: '#/parameters/AccessToken'
    - in: body
      name: body
      description: The identification of the vehicle to book. You **need to include** the `requiredForBooking` fields returned by avail.
      required: true
      schema:
        type: object
        properties:
          id:
            type: string
            description: The id of the vehicle you want to book as returned by the avail operation.
            example: eyJzdXBwbGllciI6Ik1vY2tTdXBwbGllciIsInRpbWVzdGFtcCI6MTQ2OTE3Mzk2NzM5MywiX3VpZCI6IjNlZjQ4ZTI3N2IyY2IyMGQ1MDZhZDgxM2Q1MTgyZjY5IiwiZXh0cmEiOnsiZmFrZURlc3RpbmF0aW9uIjp7ImFkZHJlc3MiOiJDdHJhLiBkZSBNYW5hY29yLCAxNzEsIDA3MDA3IFBhbG1hLCBJbGxlcyBCYWxlYXJzLCBTcGFpbiIsImNvb3JkaW5hdGVzIjp7ImxhdGl0dWRlIjozOS41NjUxMTk1LCJsb25naXR1ZGUiOjIuNzQwMzk5Mn19LCJmYWtlRmFyZSI6eyJlc3RpbWF0ZSI6MjQuODY4MTgzMDA3OTI5NDc0LCJsb3dFc3RpbWF0ZSI6MjQuODY4MTgzMDA3OTI5NDc0LCJoaWdoRXN0aW1hdGUiOjI0Ljg2ODE4MzAwNzkyOTQ3NH0sImRlbGF5Ijo3MiwidmVoaWNsZVR5cGUiOiJob3JzZSIsImRyaXZlciI6eyJuYW1lIjoiSm9uIiwic3VybmFtZSI6IlNub3ciLCJsaWNlbmNlIjoiMDEyNDQzNTIiLCJwaG9uZSI6IiszNDY2NjY2NjY2NiIsInZlaGljbGUiOiJIb3JzZSIsImF2YXRhciI6Imh0dHBzOi8vcGJzLnR3aW1nLmNvbS9wcm9maWxlX2ltYWdlcy82ODc5MDE0MzQwNDY1ODI3ODUvRFU1Qm5pdmwuanBnIn0sIm9yaWdpbiI6eyJhZGRyZXNzIjoiQXV0b3ZpYSBBdXRvcGlzdGEgZGUgTGV2YW50ZSwgMywgMDc2MTEgUGFsbWEsIElzbGFzIEJhbGVhcmVzLCBTcGFpbiIsImNvb3JkaW5hdGVzIjp7ImxhdGl0dWRlIjozOS41NDUxMTk1LCJsb25naXR1ZGUiOjIuNzIwMzk5Mn19LCJkZXN0aW5hdGlvbiI6eyJhZGRyZXNzIjoiQ3RyYS4gZGUgTWFuYWNvciwgMTcxLCAwNzAwNyBQYWxtYSwgSWxsZXMgQmFsZWFycywgU3BhaW4iLCJjb29yZGluYXRlcyI6eyJsYXRpdHVkZSI6MzkuNTcwOTIwNSwibG9uZ2l0dWRlIjoyLjY3Njc3Mzh9fSwiZmFyZSI6eyJlc3RpbWF0ZSI6MjQuODY4MTgzMDA3OTI5NDc0LCJsb3dFc3RpbWF0ZSI6MjQuODY4MTgzMDA3OTI5NDc0LCJoaWdoRXN0aW1hdGUiOjI0Ljg2ODE4MzAwNzkyOTQ3NH0sInBheW1lbnRUeXBlcyI6WyJhcHAiXX19
          paymentType:
            $ref: '#/definitions/PaymentType'
          customer:
            type: object
            description: Required data about the customer
            properties:
              phone:
                type: string
                description: The full (including country and area codes) phone number of the user.
                example: '+34666754569'
              firstname:
                type: string
                description: The first name of the customer
                example: Michael
              email:
                type: string
                description: The email of the user
                example: 'michasel@mymail.com'
              token:
                type: string
                description: A tokenized credit card to perform the payment. Only needed in those bookings whose `paymentType` is `app`
                example: MKJM9DVWcI5kZ0oSyqb2IVvB9Pr
          creditcard:
            type: object
            description: Required data about the credit card
            properties:
              token:
                type: string
                description: A tokenized credit card to perform the payment. Only needed in those bookings whose `paymentType` is `app`
                example: MKJM9DVWcI5kZ0oSyqb2IVvB9Pr

  responses:
    '200':
      description: A booking object.
      schema:
        $ref: '#/definitions/BookPostResponse'
    '401#3':
      description: Invalid token.
      schema:
        $ref: '#/definitions/UnauthorizedError'
    '422#1':
      description: Missing parameters in request.
      schema:
        $ref: '#/definitions/MissingParametersError'
    '422#2':
      description: Invalid parameters in request.
      schema:
        $ref: '#/definitions/InvalidParametersError'
    '500#4':
      description: DB Error.
      schema:
        $ref: '#/definitions/DBError'
    '500#10':
      description: Error returned by the supplier when trying to place the booking.
      schema:
        $ref: '#/definitions/SupplierFatalError'
    '500#14':
      description: Error authorizing the ride fare in the user's credit card. Only when `paymentType` is `app` and the fare returned by the supplier is fixed.
      schema:
        $ref: '#/definitions/GatewayError'
    '500#15':
      description: Could not authorize the ride because there is another payment of the same ride in-flight. Try again later. Only when `paymentType` is `app` and the fare returned by the supplier is fixed.
      schema:
        $ref: '#/definitions/PaymentBlockedError'
    '500#20':
      description: Error validating payment method (only when `paymentType` is `app`). The card provided by the user is not valid.
      schema:
        $ref: '#/definitions/PaymentValidationError'
get:
  tags:
    - Booking
  summary: Retrieves a booking already made.
  description: >
    This operation retrieves a booking already placed using the `id` field returned in the response of the `book[POST]` operation. Use it to get the current status of your booking (location, delay, status, etc).


    Since many applications will have the need to call this operations many times for each of the bookings, we have developed a *lighter* alternative based on **websockets**. Once you have placed the booking using the `book[POST]` operation, you can **open a websocket connection with the server and subscribe to your booking's channel**. You will receive all the updated of your booking via the websocket. Each of the updates will contain a full `book[GET]` response, just like the one you would receive if you called the `book[GET]` operation. Here is a small example of how to open the connection and subscribe to the channel using client-side Javascript and the [socket.io](http://socket.io/) library:
      ```javascript
      'use strict';

      const io = require('socket.io-client');
      const bookingId = 'TYPE HERE YOUR BOOKING ID';
      const socket = io.connect('https://sandbox[**OR live**].taxitime.com/', { transports : ['websocket'], path: '/api/socket.io'});
    
      socket.on('reconnect', function() {
          socket.emit('authentication', {token: '1234567890' });
          socket.on('authenticated', function() {
              // connected and authenticated
          });
      });

      socket.on('connect', function() {
          socket.emit('authentication', {token: '1234567890' });
          socket.on('authenticated', function() {
              // connected and authenticated
          });
      });

      socket.on('disconnect', function() {
          // disconnected. Do something about it!!
      });

      socket.on('book:' + bookingId, function(data) {
          // yay!! we got an update, lets print it
          console.log(data);
      });
      ```
  consumes:
    - application/json
  produces:
    - application/json
  parameters:
    - $ref: '#/parameters/AccessToken'
    - in: query
      name: id
      required: true
      type: string
      description: >
        The identification of the booking to retrieve as returned by the `id` field of the `book[POST]` operation.
  responses:
    '200':
      description: A booking object.
      schema:
        $ref: '#/definitions/BookPostResponse'
    '401#3':
      description: Invalid token.
      schema:
        $ref: '#/definitions/UnauthorizedError'
    '404#7':
      description: Could not find the specified booking.
      schema:
        $ref: '#/definitions/RecordNotFoundError'
    '422#1':
      description: Missing parameters in request.
      schema:
        $ref: '#/definitions/MissingParametersError'
    '422#2':
      description: Invalid parameters in request.
      schema:
        $ref: '#/definitions/InvalidParametersError'
    '500#4':
      description: DB Error.
      schema:
        $ref: '#/definitions/DBError'
    '500#10':
      description: Error returned by the supplier when trying to retrieve the information of the booking.
      schema:
        $ref: '#/definitions/SupplierFatalError'
    '500#14':
      description: Error paying the ride fare in the user's credit card. Only when `paymentType` is `app` and the ride has finished and it's ready to be paid.
      schema:
        $ref: '#/definitions/GatewayError'
    '500#15':
      description: Could not pay the ride because there is another payment of the same ride in-flight. Try again later. Only when `paymentType` is `app` and the ride has finished and it's ready to be paid.
      schema:
        $ref: '#/definitions/PaymentBlockedError'