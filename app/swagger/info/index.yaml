version: 1.0.0
title: TaxiTime API
description: |
    This is the first version of the TaxiTime API, an aggregator of **instant and prebooked transportation services** around the world that will allow your customers to search, compare and find their best ride!!

    First thing you need to do is get your credentials. So far, this proccess is manual, so please, [drop us an e-mail](mailto:dlafuente@hotelbeds.com?subject=Credentials for TaxiTime API), and we'll get back to you as soon as we can.

    We have defined three types of operations in our system. All of them are documented and can be tested here:
    - **Auth**: all the clients integrated with the TaxiTime API have a unique set of credentials. These credentials are used to obtain and renew a token, and the token is needed to perform any of the other requests. The Auth block defines all the operations dealing with tokens.
    - **Booking**: the operations dealing with the **booking flow**. This includes the operations to get availability of vehicles. See the **Booking Flow** chapter for more info.
    - **User**: the operations dealing with **user management** (register a usser, add a payment method, update a user, gets the user's bookings, etc). User management is *optional* in TaxiTime, meaning that you can be integrated with us, and NOT use our user management operations. In that case, you will have to have your own user management system.

    We have set up two environments: **SANDBOX** and **LIVE**. Both are identical, with the exception that in the LIVE environment, you will be actually booking a real taxi ;-). Your will need to request a different set of credentials for each environment. We'll give you SANDBOX credentials for your development & testing stage, and LIVE credentials when you are ready to be launched. The URL to prepend to the requests in the SANDBOX environment is:
    ```
    https://sandbox.taxitime.com
    ```
    whereas the one for the LIVE environment is:
    ```
    https://live.taxitime.com
    ```
    ##**Authentication**
    You have your set of credentials. Now what? For all the operations in the **Booking** and **User** blocks, you will need to send a token. This token is obtained through the `/auth/v1/tokens/new` operation (defined in the **Auth** block). This operation **should only be called once** (if you are NOT using our user management system, you may call it multiple times), the first time your user opens your app. This operation not only returns a token, **but also creates a new anonymous user**, and returns its `userId` along with the token. Once you have this `userId` you just need to call `/auth/v1/tokens/renew` to renew the token when it expires.
    ##**The Booking Flow**
    Our booking flow is pretty simple and thoroughly documented in the **Booking** block of operations. Here is how it works:
    - Before even starting the booking flow you may want to find out and show to your users where does **TaxiTime has coverage** and which **taxi suppliers** operate in each area. The `/api/v1/areas/available` answers both questions. This is a preliminary request and it's definitely not needed to perform a booking.
    - If you just want to find out how many and which **taxi suppliers** operate around the location of your user, then call `/api/v1/nearbySuppliers` with just a pair of coordinates and you'll get a list with all the suppliers operating around that area.
    - Next step is to query the system about the **availability** of vehicles, either for now or for later. By sending a request to the `/api/v1/avail` operation with the origin, and optionally the destination and the date (for prebookings) of the ride, you will receive the list of vehicles available to pick up your customer.
    - Use the `id` of one of the vehicles returned in the availability in order to **book** it, using the `POST /api/v1/book` operation. Right before placing the booking, the user will need to **accept the terms & conditions** of the supplier providing the service for the sected vehicle. The `GET /api/v1/suppliers/byModuleName/:moduleName` operation returns this information.
    - **Check the status** of your booking sending the `bookingId` received from the bookPOST operation to the `GET /api/v1/book` operation. Learn more about statuses right below.
    - You can also **cancel** the booking sending the same `bookingId` to the `/api/v1/cancel` operation

    ###**Booking statuses**
    Vehicles and drivers are living creatures, and they have a behaviour. The booking status is our way to tell the app what's the driver doing. You get the `status` of a booking everytime you make a `GET /api/v1/book` operation (or, if you are connected through a websocket, everytime the system notifies a change). Here is a brief description of the possible statuses that you may receive as a response to the `GET /api/v1/book` operation:
      - `dispatching`: the supplier's system has received the booking request, but it's assigning a vehicle.
      - `confirmed`: the supplier's system has successfully assigned a vehicle.
      - `unavailable`: the supplier's system was unable to assign a vehicle. The booking is cancelled.
      - `way`: the driver is on his way to the pickup point.
      - `waiting`: the driver has arrived to the pickup point and it's waiting for the passenger.
      - `running`: the driver has picked up the passenger and is taking him to the destination.
      - `finished`: the ride has finished. The passenger is at the destination point.
      - `cancelled`: the ride has been cancelled.
      - `drivernoshow`: the customer reported that the driver has not been in the pickup point. The booking is now cancelled.
      - `passengernoshow`: the driver reported that the passenger was not in the pickup point while he was waiting. The booking is now cancelled.

    ###**Payment statuses**
    Booking statuses tell us about the status of the ride, what's going on with the driver, the passenger and the ride itself. When the booking status is `finished`, it means that the ride is over: the passenger has been dropped to his destination and the driver is probably looking for his next customer. **In most of the cases** this will also mean that the cost of the ride is known and the payment has been already done, **but this is not always the case**. In some cases, the final price os the ride is only known some time (generally from some minutes up to a couple of hours) after the ride has finished. The payment status is returned under the `payment` object by the `GET /api/v1/book` operation. If the `payment` object returned by the `GET /api/v1/book` operation is null or undefined, it means that no payment has been done for the booking. The possible values for the payment status are:
      - `authorized`: a certain amount has been authorized in the customer's card, but the final payment is still pending.
      - `paying`: an error occured while trying to pay the booking. Please, let us know so we can fix it.
      - `paid`: The payment has been succesfully completed. The `amount` and `currency` in the `payment`object are now final.

    ###**Payment validation**
    If a booking is going to be paid through the app using a credit card, at a certain point of the booking flow, we validate it. We do it by authorizing a certain amount on the credit card, and we do it when we are certain that there is a car going to pick uo the customer (that is, when the booking is in `confirmed` or `way` status). If the validation fails (meaning that the card is invalid), then the system cancels the booking and adds the error returned by the validation process under the `reason` field of the response. So, if you have paced a booking and you are either connected to the `book[GET]` socket or making requests to the `GET /api/v1/book` operation to follow the evolution of a booking and all of a sudden you receive a response with status `cancelled`, check the field `reason` in the response: if it is empty, it means that somehow the user cancelled the booking. If it contains an error object whose `name` is `GatewayError`, then the validation of the credit card failed and the booking was cancelled automatically by the system.

    ###**Vehicle types**
    TaxiTime is about booking vehicles, so it's important to be able to tell one vehicle from another. Our `/api/v1/avail` operation returns a list of vehicles, and our `POST /api/v1/book` operation will book one of these vehicles. So it's everything about the vehicles. There are a number of fields inside the `vehicleType` object that helps us tell the user what kind of vehicle is about to book:
      - **name**: the "commercial" name of the vehicle. Typically, a text to be displayed to the user on the web/app and make him aware of the kind of vehicle he is about to book.
      - **category**: the kind of car that the user is about to book. Could be one of the following values:
        - `standard`: a standard car. There could be small urban utilitaries or bigger sedans.
        - `suv`: a Sport Utility Vehicle or similar.
        - `limo`: a limousine or similar.
        - `van`: a van or similar.
        - `bus`: a bus or similar.
        - `boat`: a boat.
      - **service**: the kind of service that the customer will receive if he books the vehicle. Could be one of the following values:
        - `standard`: a standard service. Like in a regular taxi or a 'lite' black car.
        - `executive`: a black car with uniformed driver or similar.
        - `luxury`: a top-end car (like a Mercedes S class) with uniformed driver.
        - `shared`: a shared service (car pooled service).
      - **licence**: the licence of the driver. Could be one of the following values:
        - `unlicenced`: drivers NOT holding a cab or minicab/VTC licence.
        - `taxi`: taxi drivers.
        - `black car`: minicab/VTC licence holders.
        - `bus`: bus drivers.
      - **badges**: an array of strings holding the extra features of the vehicles and drivers. The array could be empty or unexisting (meaning that the vehicle has no extra features), or hold one or several values. The driver badges represent an estimation of the 'quality' of the driver based on his training, rating, licence, languages he/she speaks, etc. The possible values of a badge are the following:
        - `priority`: the assignation of this vehicle will be prioritized with respect to others. This vehicle will be assigned faster.
        - `adapted`: vehicle adapted for customers with reduced mobility.
        - `eco`: electric vehicle.
        - `pet`: the vehicle accepts pets.
        - `family`: the vehicle is adapted to carry kids or babies.
        - `wifi`: the vehicle has on board wifi.
        - `aircon`: the vehicle has air conditioning.
        - `media`: the vehicle offers entertainment on board.
        - `snack`: the vehicle offers snacks on board.
        - `driverbronze`: the driver of the vehicle has a bronze badge.
        - `driversilver`: the driver of the vehicle has a silver badge.
        - `drivergold`: the driver of the vehicle has a gold badge.
        - `driverplatinum`: the driver of the vehicle has a platinum badge.
      - **passengers**: the maximum number of passengers accepted in the vehicle.
      - **luggage**: the maximum number of pieces of luggage that would fit in the vehicle.
        - **small**: the maximum number of small (cabin baggage in a plane) pieces of luggage that would fit in the vehicle **if all the passengers were carrying small pieces of luggage**.
        - **large**: the maximum number of large (check-in baggage in a plane) pieces of luggage that would fit in the vehicle **if all the passengers were carrying large pieces of luggage**.

    ##**Payment**
    We integrate two kinds of suppliers regarding payment: those who allows the customer to pay the ride through the app (**payment-in-app**), and those who doesn't (**payment-in-car** - the customer will pay the ride to the driver). We don't need to do anything to enable payment in the payment-in-car suppliers; payment is done physically by the customer handing the money to the driver. There are three **payment types** defined:
    - `cash`: the payment is done **to the driver in cash**.
    - `card`: the payment is done **to the driver in using a credit card**.
    - `app`: the payment is done **through the app using a credit card**. In this case, **no payment is done directly by the customer to the driver**.

    The payment types allowed by each vehicle are returned by the `POST /api/v1/avail` operation of the booking flow. Once the user selects a vehicle and a payment type, the payment type must be included in the `POST /api/v1/book` operation to place the booking.

    For the payment-in-app suppliers, we use **<a href="https://spreedly.com/" target="_blank">Spreedly</a>**, and if you want to integrate our services in your app or web using this API, **you will need to tokenize your customer's credit cards using Spreedly**, and send the token in the `POST /api/v1/book` operation. Happly there are <a href="https://docs.spreedly.com/guides/adding-payment-methods/" target="_blank">several ways to do this</a>. Each of these ways require a different amount of **<a href="https://blog.spreedly.com/2014/12/18/pci-dss-v3-0-for-online-merchants/#.V0WEapN96V4" target="_blank">PCI Scope</a>** on the side of the implementer. **<a href="https://docs.spreedly.com/guides/adding-payment-methods/iframe/" target="_blank">iFrames</a>** and **<a href="https://docs.spreedly.com/guides/adding-payment-methods/express/" target="_blank">Spreedly Express</a>** require **almost none PCI compliance** and are really easy to integrate. Using **<a href="https://docs.spreedly.com/guides/adding-payment-methods/api/" target="_blank">Spreedly's API</a>** is easy, convenient and seamless, but it requires the **highest degree of PCI compliance**.

    Regardless of the method you choose in order to tokenize your customer's credit cards in Spreedly, **you will need to include our Spreedly environment keys** in your integration for the token to be valid and ready to use for transactions. Please [drop us an e-mail](mailto:dlafuente@hotelbeds.com?subject=Spreedly environment keys for TaxiTime API), and we'll send you the environment keys.

    ##**User Management**
    TaxiTime provides a complete set of operations to manage the users of your app in our backend. We use the phone number as a primary key to identify a user and we provide the means to validate the phone number using an SMS code. You can add and update basic information (name, surname, e-mail) to your users, add and update payment methods (i.e. credit cards), add tags to classify their bookings, list their bookings, provide them with receipts, etc.

    Using our user management system is optional, you can still integrate with us using just the operations from the **Auth** and **Booking** blocks and do the user management yourself. Anyway we encourage you to use ours. It's already proven and fit for purpose.

    ##**Errors**
    Each of the documented operations come with a list of potential errors that could be returned by the operation. Each type of error in TaxiTime have a unique `code` and a `httpStatus` for the response. Different error types (with different error codes) might share the same httpStatus. For example, the `GET /api/v1/book` operation might return different errors under the httpStatus 500 (Internal Server Error). Each of these errors will be docummented using the compound key `httpStatus#errorCode`. This way, if an operation returns a `CancellationError`(code 12) under the httpStatus 500, this particular response will be represented as `500#12`.
termsOfService: 'http://taxitime.com/terms.txt'